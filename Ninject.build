<?xml version="1.0" encoding="utf-8"?>
<project name="Ninject" default="all">

	<property name="path.base" value="${project::get-base-directory()}"/>
	<property name="path.build" value="${path.base}/build"/>
	<property name="path.working" value="${path.base}/build/working"/>
	<property name="path.lib" value="${path.base}/lib"/>
	<property name="path.dist" value="${path.base}/dist"/>
	<property name="path.docs" value="${path.base}/docs"/>
	<property name="path.src" value="${path.base}/src"/>
	<property name="path.tools" value="${path.base}/tools"/>
	<property name="path.tools.xunit" value="${path.tools}/xunit.net"/>
	<property name="path.tools.moq" value="${path.tools}/moq"/>
	<property name="path.tools.ilmerge" value="${path.tools}/ilmerge"/>
	<property name="path.tools.mono" value="${path.tools}/mono"/>

	<property name="version" value="2.0.0.0" overwrite="false"/>
	<property name="version.major" value="${version::get-major(version::parse(version))}" dynamic="true"/>
	<property name="version.minor" value="${version::get-minor(version::parse(version))}" dynamic="true"/>
	<property name="version.build" value="${version::get-build(version::parse(version))}" dynamic="true"/>
	<property name="version.revision" value="${version::get-revision(version::parse(version))}" dynamic="true"/>
	<property name="build.version" value="${version.major}.${version.minor}.${version.build}.${version.revision}" dynamic="true"/>
	<property name="build.config" value="debug" overwrite="false"/>
	<property name="build.platform" value="net-3.5" overwrite="false"/>
	<property name="build.asminfo" value="SharedBuildAssemblyInfo.cs"/>

	<property name="package" value="false" readonly="false" overwrite="false"/>
	<property name="skip.tests" value="false" readonly="false" overwrite="false"/>

	<target name="rebuild" depends="clean, all"/>

	<target name="clean">
		<delete dir="${path.build}" if="${directory::exists(path.build)}"/>
		<delete dir="${path.dist}" if="${directory::exists(path.dist)}"/>
	</target>

	<target name="all" depends="core extensions test"/>
	<target name="extensions" depends="mvc csl"/>

	<target name="get-subversion-revision-number">
		<if test="${version.revision=='0'}">
			<!-- Credit to Ayende Rahien -->
			<exec program="svn" commandline='info "${project::get-base-directory()}" --xml' output="_svn.xml" failonerror="false"/>
			<xmlpeek file="_svn.xml" xpath="/info/entry/@revision" property="version.revision" failonerror="false"/>
			<delete file="_svn.xml" failonerror="false"/>
		</if>
	</target>

	<target name="create-assembly-info" depends="get-subversion-revision-number">
		<asminfo output="${path.src}/${build.asminfo}" language="CSharp">
			<imports>
				<import namespace="System"/>
				<import namespace="System.Reflection"/>
				<import namespace="System.Runtime.InteropServices"/>
			</imports>
			<attributes>
				<attribute type="AssemblyProductAttribute" value="Ninject: Lightweight dependency injection for .NET"/>
				<attribute type="AssemblyCompanyAttribute" value="Enkari, Ltd."/>
				<attribute type="AssemblyCopyrightAttribute" value="Copyright Â© 2007-2009 Enkari, Ltd. and contributors"/>
				<attribute type="AssemblyVersionAttribute" value="${build.version}"/>
				<attribute type="ComVisibleAttribute" value="false"/>
			</attributes>
		</asminfo>
	</target>

	<target name="init" depends="create-assembly-info">
		
		<mkdir dir="${path.build}" if="${not(directory::exists(path.build))}"/>
		<mkdir dir="${path.dist}" if="${not(directory::exists(path.dist))}"/>
		
		<call target="config-build-${build.config}"/>
		<call target="config-platform-${build.platform}"/>
		
		<property name="current.path.build" value="${path.build}/${build.platform}/${build.config}"/>
		<property name="current.path.build.extensions" value="${path.build}/${build.platform}/${build.config}/extensions"/>
		<property name="current.path.test" value="${path.build}/${build.platform}/tests" />
		
		<mkdir dir="${current.path.build}" if="${not(directory::exists(current.path.build))}"/>
		<mkdir dir="${current.path.build.extensions}" if="${not(directory::exists(current.path.build.extensions))}"/>
		<mkdir dir="${path.working}" if="${not(directory::exists(path.working))}"/>
		
		<copy todir="${path.working}">
			<fileset basedir="${path.lib}">
				<include name="*.dll"/>
				<include name="*.xml"/>
			</fileset>
		</copy>
		
	</target>

	<target name="config-build-debug">
		<property name="build.debug" value="true"/>
		<property name="build.optimize" value="false" overwrite="false"/>
		<property name="global.build.defines" value="DEBUG,TRACE"/>
	</target>

	<target name="config-build-release">
		<property name="build.debug" value="false"/>
		<property name="build.optimize" value="true" overwrite="false"/>
		<property name="global.build.defines" value="TRACE,STRONG"/>
	</target>

	<target name="config-platform-net-3.5">
		<property name="nant.settings.currentframework" value="net-3.5"/>
		<property name="build.defines" value="${global.build.defines},NET,NET_35"/>
	</target>

	<target name="config-platform-silverlight-2.0">
		<property name="nant.settings.currentframework" value="silverlight-2.0"/>
		<property name="build.defines" value="${global.build.defines},SILVERLIGHT,SILVERLIGHT_20,NO_WEB,NO_PARTIAL_TRUST,NO_EXCEPTION_SERIALIZATION,NO_DEBUG_SYMBOLS"/>
	</target>

	<target name="compile-core">
		<csc noconfig="true" warnaserror="true" target="library" debug="${build.debug}" optimize="${build.optimize}" define="${build.defines}"
         keyfile="${path.src}/Ninject.snk" output="${path.working}/Ninject.dll">
			<sources basedir="${path.src}">
				<include name="${build.asminfo}"/>
				<include name="Ninject/**/*.cs"/>
			</sources>
			<references basedir="${path.working}">
				<include name="mscorlib.dll"/>
				<include name="System.dll"/>
				<include name="System.Core.dll"/>
				<include name="System.Web.dll"/>
				<include name="LinFu.DynamicProxy.dll"/>
			</references>
			<nowarn>
				<warning number="1584"/>
			</nowarn>
		</csc>
	</target>

	<target name="link-core" depends="compile-core">
		<monolinker verbose="true" path="${path.tools.mono}/monolinker.exe" libraryPath="${path.working}" debug="${build.debug}" outputPath="${path.working}/linked">
			<assemblies basedir="${path.working}">
				<include name="Ninject.dll"/>
			</assemblies>
		</monolinker>
	</target>

	<target name="merge-core" depends="link-core">
		<!--
		<monomerge verbose="true" path="${path.tools.mono}/monomerge.exe" input="${path.working}/Ninject.dll" output="${current.path.build}/Ninject.dll">
			<assemblies basedir="${path.working}">
				<include name="LinFu.DynamicProxy.dll"/>
			</assemblies>
		</monomerge>
		-->
		<ilmerge path="${path.tools.ilmerge}/ilmerge.exe" internalize="true" keyfile="${path.src}/Ninject.snk" input="${path.working}/linked/Ninject.dll" output="${current.path.build}/Ninject.dll">
			<assemblies basedir="${path.working}/linked">
				<include name="LinFu.DynamicProxy.dll"/>
			</assemblies>
		</ilmerge>
	</target>

	<target name="sign-core" depends="merge-core">
		<delay-sign keyfile="${path.src}/Ninject.snk">
			<targets basedir="${current.path.build}">
				<include name="Ninject.dll"/>
			</targets>
		</delay-sign>
	</target>

	<target name="core" depends="init sign-core">
		<copy file="${current.path.build}/Ninject.dll" todir="${path.working}" overwrite="true"/>
	</target>

	<target name="csl" depends="init core">
		<csc keyfile="${path.src}/Ninject.snk" noconfig="true" warnaserror="true" target="library" debug="${build.debug}" optimize="${build.optimize}" define="${build.defines}"
         output="${current.path.build.extensions}/CommonServiceLocator.NinjectAdapter.dll">
			<sources basedir="${path.src}">
				<include name="${build.asminfo}"/>
				<include name="CommonServiceLocator.NinjectAdapter/**/*.cs"/>
			</sources>
			<references basedir="${path.working}">
				<include name="mscorlib.dll"/>
				<include name="System.dll"/>
				<include name="System.Core.dll"/>
				<include name="System.Web.dll"/>
				<include name="Microsoft.Practices.ServiceLocation.dll"/>
				<include name="Ninject.dll"/>
			</references>
			<nowarn>
				<warning number="1584"/>
			</nowarn>
		</csc>
	</target>

	<target name="mvc">
		<csc keyfile="${path.src}/Ninject.snk" noconfig="true" warnaserror="true" target="library" debug="${build.debug}" optimize="${build.optimize}" define="${build.defines}"
         output="${current.path.build.extensions}/Ninject.Web.Mvc.dll">
			<sources basedir="${path.src}">
				<include name="${build.asminfo}"/>
				<include name="Ninject.Web.Mvc/**/*.cs"/>
			</sources>
			<references basedir="${path.working}">
				<include name="mscorlib.dll"/>
				<include name="System.dll"/>
				<include name="System.Core.dll"/>
				<include name="System.Web.dll"/>
				<include name="System.Web.Abstractions.dll"/>
				<include name="System.Web.Mvc.dll"/>
				<include name="System.Web.Routing.dll"/>
				<include name="Ninject.dll"/>
			</references>
			<nowarn>
				<warning number="1584"/>
			</nowarn>
		</csc>
	</target>

	<target name="compile-tests" depends="core" unless="${skip.tests}">
		<mkdir dir="${current.path.test}"/>
		<copy todir="${current.path.test}">
			<fileset basedir="${current.path.build}">
				<include name="*.dll"/>
			</fileset>
		</copy>
		<copy todir="${current.path.test}">
			<fileset basedir="${path.tools.xunit}">
				<include name="xunit.dll"/>
			</fileset>
		</copy>
		<copy todir="${current.path.test}">
			<fileset basedir="${path.tools.moq}">
				<include name="Moq.dll"/>
			</fileset>
		</copy>
		<csc noconfig="true" warnaserror="true" target="library" debug="${build.debug}" optimize="${build.optimize}" define="${build.defines}"
         output="${current.path.test}/Ninject.Tests.dll">
			<sources basedir="${path.src}">
				<include name="Ninject.Tests/**/*.cs"/>
			</sources>
			<references basedir="${current.path.test}">
				<include name="mscorlib.dll"/>
				<include name="System.dll"/>
				<include name="System.Core.dll"/>
				<include name="System.Web.dll"/>
				<include name="Moq.dll"/>
				<include name="xunit.dll"/>
				<include name="Ninject.dll"/>
			</references>
			<nowarn>
				<warning number="1584"/>
			</nowarn>
		</csc>
	</target>

	<target name="test" depends="compile-tests" unless="${skip.tests}">
		<xunit workingDir="${current.path.test}" assembly="Ninject.Tests.dll" html="${current.path.test}/results.html"/>
	</target>

	<target name="package" depends="all">
		<zip zipfile="${path.dist}\Ninject-${build.version}-${build.config}-${build.platform}.zip" ziplevel="9">
			<fileset basedir="${current.path.build}">
				<include name="*.dll"/>
				<include name="*.pdb"/>
				<include name="*.xml"/>
			</fileset>
		</zip>
		<zip zipfile="${path.dist}\Ninject-${build.version}-source.zip" ziplevel="9">
			<fileset basedir="${path.src}">
				<include name="**/*.cs"/>
				<include name="**/*.csproj"/>
				<include name="**/*.sln"/>
				<include name="**/*.txt"/>
				<include name="**/*.build"/>
			</fileset>
		</zip>
	</target>

</project>